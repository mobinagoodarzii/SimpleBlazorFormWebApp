@page "/Clients/Edit/{Id:int}"

@using BlazorApp.Models
@using System.Text.Json.Nodes


<div class="row">
	<div class="col-lg-8">
		<h1 class="mb-5">Edit Client</h1>


		@if (client == null)
		{
			<p><em>Loading...</em></p>
		}
		else
		{
			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Client ID</label>
				<div class="col-md-8">
					<input class="form-control-plaintext" value="@Id" readonly />
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">First Name</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.FirstName" />
					<span class="text-danger">@Errors["FirstName"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Last Name</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.LastName" />
					<span class="text-danger">@Errors["LastName"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Age</label>
				<div class="col-md-8">
					<input type="number" class="form-control" @bind="ClientData.Age" />
					<span class="text-danger">@Errors["Age"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Education</label>
				<div class="col-md-8">
					<select class="form-select" @bind="ClientData.Education">
						<option value="High School">High School</option>
						<option value="Bachelor">Bachelor</option>
						<option value="Master">Master</option>
						<option value="PhD">PhD</option>
					</select>
					<span class="text-danger">@Errors["Education"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Email</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.Email" />
					<span class="text-danger">@Errors["Email"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Phone</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.Phone" />
					<span class="text-danger">@Errors["Phone"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Address</label>
				<div class="col-md-8">
					<input class="form-control" @bind="ClientData.Address" />
					<span class="text-danger">@Errors["Address"]?[0]</span>
				</div>
			</div>

			<div class="row">
				<div class="offset-md-4 col-md-4 d-grid">
					<button class="btn btn-primary" @onclick="SaveClient">Submit</button>
				</div>
				<div class="col-md-4 d-grid">
					<a class="btn btn-outline-primary" href="/Clients">Cancel</a>
				</div>
			</div>
		}
	</div>
</div>



@inject HttpClient http
@inject NavigationManager navManager

@code {
	[Parameter]
	public int Id { set; get; }
	public Client? client = null;
	public ClientDto ClientData { set; get; } = new();
	public JsonNode Errors { set; get; } = new JsonObject();



	protected override async Task OnParametersSetAsync()
	{
		try
		{
			client = await http.GetFromJsonAsync<Client>("https://localhost:4000/api/Clients/" + Id);
			ClientData.FirstName = client?.FirstName ?? "";
			ClientData.LastName = client?.LastName ?? "";
			ClientData.Age = client?.Age ?? 0;
			ClientData.Education = client?.Education ?? "";
			ClientData.Email = client?.Email ?? "";
			ClientData.Phone = client?.Phone ?? "";
			ClientData.Address = client?.Address ?? "";
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception : " + ex.Message);
		}
	}

	protected async Task SaveClient()
	{
		var response = await http.PutAsJsonAsync("https://localhost:4000/api/Clients/" + Id, ClientData);
		if (response.IsSuccessStatusCode)
		{
			navManager.NavigateTo("/Clients");
		}
		else
		{
			var strResponse = await response.Content.ReadAsStringAsync();
			try
			{
				var jsonResponse = JsonNode.Parse(strResponse);
				Errors = jsonResponse?["errors"] ?? new JsonObject();
			}
			catch (Exception ex)
			{
			}
		}
	}
}
